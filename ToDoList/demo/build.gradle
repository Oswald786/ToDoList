plugins {
    id("io.micronaut.application") version "4.5.4"
    id("com.gradleup.shadow") version "8.3.7"
    id("io.micronaut.aot") version "4.5.4"
}

version = "0.1"
group = "com.todolist"

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    runtimeOnly("org.yaml:snakeyaml")
    // ... existing code ...
    compileOnly("io.micronaut:micronaut-http-client")
    runtimeOnly("ch.qos.logback:logback-classic")
    testImplementation("io.micronaut:micronaut-http-client")

    // Core Micronaut runtime (required for application + annotations)
    implementation("io.micronaut:micronaut-runtime")

    // Micronaut Data JPA + annotation processor (for @Repository, @Entity usage with Hibernate)
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")

    // JDBC connection pool (HikariCP integration)
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")

    // Oracle JDBC driver (pick one available to you)
    runtimeOnly("com.oracle.database.jdbc:ojdbc11:23.4.0.24.05")
    // If ojdbc11 isn't resolvable in your environment, try:
    // runtimeOnly("com.oracle.database.jdbc:ojdbc8")

    // Optional but useful if you use javax/jakarta validation annotations
    implementation("io.micronaut.validation:micronaut-validation")

    implementation "org.mapstruct:mapstruct:1.6.0"          // or latest
    annotationProcessor "org.mapstruct:mapstruct-processor:1.6.0"
    annotationProcessor "io.micronaut:micronaut-inject-java"

    // Lombok (compile-time only + annotation processor)
    compileOnly("org.projectlombok:lombok:1.18.34")
    annotationProcessor("org.projectlombok:lombok:1.18.34")

    // Lombok for tests (optional but recommended if you use Lombok in test sources)
    testCompileOnly("org.projectlombok:lombok:1.18.34")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.34")

    implementation("io.micronaut.serde:micronaut-serde-jackson")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations") // <-- add
    annotationProcessor("io.micronaut.validation:micronaut-validation-processor")
    implementation("io.micronaut.reactor:micronaut-reactor") // <-- add
    implementation("io.micrometer:context-propagation")

    testImplementation("org.junit.jupiter:junit-jupiter:5.10.2")
    testImplementation("org.mockito:mockito-core:5.20.0")
    testImplementation("org.mockito:mockito-junit-jupiter:5.20.0")

    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testAnnotationProcessor("io.micronaut:micronaut-inject-java")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

    testImplementation("org.junit.jupiter:junit-jupiter:5.10.2")
    testImplementation("org.mockito:mockito-core:5.20.0")
    testImplementation("org.mockito:mockito-junit-jupiter:5.20.0")




}



application {
    mainClass = "com.todolist.Application"
}
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}


graalvmNative.toolchainDetection = false

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.todolist.*")
    }
    aot {
        // Please review carefully the optimizations enabled below
        // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
        replaceLogbackXml = true
    }
}


tasks.named("dockerfileNative") {
    jdkVersion = "21"
}


